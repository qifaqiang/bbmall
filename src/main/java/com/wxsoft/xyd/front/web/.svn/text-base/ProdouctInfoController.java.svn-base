package com.wxsoft.xyd.front.web;

import java.io.UnsupportedEncodingException;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;

import com.alibaba.fastjson.JSONObject;
import com.wxsoft.framework.config.BaseConfig;
import com.wxsoft.framework.config.SystemConfig;
import com.wxsoft.framework.controller.BaseController;
import com.wxsoft.framework.util.Tools;
import com.wxsoft.xyd.common.model.CompanyStock;
import com.wxsoft.xyd.common.model.PromotionActivity;
import com.wxsoft.xyd.common.model.User;
import com.wxsoft.xyd.common.model.UserCollection;
import com.wxsoft.xyd.common.model.UserComment;
import com.wxsoft.xyd.common.service.CompanyStockService;
import com.wxsoft.xyd.common.service.PromotionActivityService;
import com.wxsoft.xyd.common.service.PromotionProductService;
import com.wxsoft.xyd.common.service.RollPicService;
import com.wxsoft.xyd.common.service.UserCollectionService;
import com.wxsoft.xyd.common.service.UserCommentService;
import com.wxsoft.xyd.prod.model.Product;
import com.wxsoft.xyd.prod.model.ProductCatalog;
import com.wxsoft.xyd.prod.model.ProductPackage;
import com.wxsoft.xyd.prod.model.ProductSpecificationInfo;
import com.wxsoft.xyd.prod.service.ProductCatalogService;
import com.wxsoft.xyd.prod.service.ProductImageService;
import com.wxsoft.xyd.prod.service.ProductPackageService;
import com.wxsoft.xyd.prod.service.ProductService;
import com.wxsoft.xyd.prod.service.ProductSpecificationInfoService;
import com.wxsoft.xyd.prod.service.ProductSpecificationService;
import com.wxsoft.xyd.system.model.AjaxPage;
import com.wxsoft.xyd.system.model.Company;
import com.wxsoft.xyd.system.service.CompanyService;

/**
 * 
 * Title: 主页接口 Description: Company:
 * 
 * @author kyz
 * @date 2015年12月17日下午8:52:23
 */
@Controller
@RequestMapping(SystemConfig.FXSHOP_ACCESS_ANNOTATION_INTERFACES
		+ "/productInfo")
public class ProdouctInfoController extends BaseController {
	@Autowired
	private RollPicService rollPicService;
	@Autowired
	private ProductCatalogService productCatalogService;
	@Autowired
	private ProductService productService;
	@Autowired
	private ProductImageService productImageService;
	@Autowired
	private CompanyService companyService;
	@Autowired
	private PromotionActivityService promotionActivityService;
	@Autowired
	private ProductSpecificationService productSpecificationService;
	@Autowired
	private ProductPackageService productPackageService;
	@Autowired
	private ProductSpecificationInfoService productSpecificationInfoService;
	@Autowired
	private CompanyStockService companyStockService;
	@Autowired
	private UserCollectionService userCollectionService;
	@Autowired
	private PromotionProductService promotionProductService;
	@Autowired
	private UserCommentService userCommentService;

	/**
	 * 获取商品信息
	 * 
	 * @return
	 */
	@RequestMapping("/getProductInfo")
	public void getProductInfo(HttpServletResponse response, Integer prodId,
			String companyId, HttpServletRequest request, HttpSession session) {
		JSONObject json = new JSONObject();
		// 获取商品信息
		Product p = new Product();
		p.setId(prodId);
		if (Tools.notEmpty(companyId)) {
			Map<String, Object> rplist = productService
					.selectFrontByProductInfo(p);
			if (null != rplist) {// 判断当前商品是否存在
				json.put(BaseConfig.RESCODE, "0");
				json.put(BaseConfig.RESMESSAGE, "success");
				json.put("prod", rplist);
				List<String> prodImgList = productImageService
						.getAllByProductImageRMap(prodId);
				json.put("prodImgList", prodImgList);
			} else {
				//商品不存在
				json.put(BaseConfig.RESCODE, "ER5001");
				json.put(BaseConfig.RESMESSAGE,
						BaseConfig.MESSAGE.get("productInfo.ER5001").toString());
			}
			// 获取基地的基本信息
			Company c = companyService.getCompanyWxByCompanyId(Integer
					.parseInt(companyId));
			json.put("sendPrice", c.getSendPrice());
			json.put("chargeSendPrice", c.getChargeSendPrice());
		} else {
			//请先选择基地
			json.put(BaseConfig.RESCODE, "ER5002");
			json.put(BaseConfig.RESMESSAGE,
					BaseConfig.MESSAGE.get("productInfo.ER5002").toString());
		}
		try {
			responseAjax(json, response);
		} catch (UnsupportedEncodingException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}

	/**
	 * 获取商品信息
	 * 
	 * @return
	 */
	@RequestMapping("/getProductInfoPc")
	public void getProductInfoPc(HttpServletResponse response, Integer prodId,
			String companyId, HttpServletRequest request, HttpSession session) {
		JSONObject json = new JSONObject();
		// 获取商品信息
		Product p = new Product();
		p.setId(prodId);
		Map<String, Object> rplist = productService.selectFrontByProductInfo(p);
		if (null != rplist) {// 判断当前商品是否存在
			json.put(BaseConfig.RESCODE, "0");
			json.put(BaseConfig.RESMESSAGE, "success");
			json.put("prod", rplist);
			UserComment uc = new UserComment();
			uc.setProdId(prodId);
			uc.setvState(1);
			int countAll = userCommentService
					.selectCountLevelFromUserComment(uc);
			json.put("commentCount", countAll);
			List<String> prodImgList = productImageService
					.getAllByProductImageRMap(prodId);
			json.put("prodImgList", prodImgList);
			// 获取一级分类信息
			ProductCatalog pc1 = productCatalogService
					.selectByPrimaryKey(Integer.parseInt(rplist.get(
							"catalog_id_1").toString()));
			// 获取二级分类信息
			ProductCatalog pc2 = productCatalogService
					.selectByPrimaryKey(Integer.parseInt(rplist.get(
							"catalog_id_2").toString()));
			json.put("pc1id", pc1.getId());
			json.put("pc1name", pc1.getName());
			json.put("pc2id", pc2.getId());
			json.put("pc2name", pc2.getName());
			if (Tools.isEmpty(companyId)) {
				json.put("companyBaseINFO", "productInfo.ER5002");
			} else {
				// 获取基地的基本信息
				Company c = companyService.getCompanyWxByCompanyId(Integer
						.parseInt(companyId));
				json.put("sendPrice", c.getSendPrice());
				json.put("chargeSendPrice", c.getChargeSendPrice());
			}
		} else {
			//商品不存在
			json.put(BaseConfig.RESCODE, "ER5001");
			json.put(BaseConfig.RESMESSAGE,
					BaseConfig.MESSAGE.get("productInfo.ER5001").toString());
		}
		try {
			responseAjax(json, response);
		} catch (UnsupportedEncodingException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}

	/**
	 * 获取商品規格信息
	 * 
	 * @return
	 */
	@RequestMapping("/getProductSepcInfo")
	public void getProductSepcInfo(HttpServletResponse response,
			String companyId, Integer prodId, HttpServletRequest request,
			HttpSession session) {
		JSONObject json = new JSONObject();
		int companyid = 34;
		int maxInventory = 0;
		if (Tools.notEmpty(companyId)) {
			companyid = Integer.parseInt(companyId);
		}
		// 获取商品信息
		Product p = new Product();
		p.setId(prodId);
		Map<String, Object> rplist = productService.selectFrontByProduct(p);
		if (null != rplist) {// 判断当前商品是否存在
			json.put(BaseConfig.RESCODE, "0");
			json.put(BaseConfig.RESMESSAGE, "success");

			Map<String, Object> SKU = new HashMap<String, Object>();
			Map<String, Object> SKUAll = new HashMap<String, Object>();

			Map<String, Object> Discount = new HashMap<String, Object>();
			List<Object> DisInfoList = new ArrayList<Object>();

			Map<String, Object> lstSKUVal = new HashMap<String, Object>();
			List<Object> lstSKUValList = new ArrayList<Object>();
			Map<String, Object> lstProductJson = new HashMap<String, Object>();
			List<Object> lstProductJsonList = new ArrayList<Object>();
			CompanyStock csTemp = null;

			if (rplist.get("type").toString().equals("0")) {// 普通商品
				// 规格信息
				ProductSpecificationInfo psi = new ProductSpecificationInfo();
				psi.setProductId(prodId);
				List<ProductSpecificationInfo> psiList = productSpecificationInfoService
						.getAllByProductSpecificationInfo(psi);

				// 库存信息
				csTemp = new CompanyStock();
				csTemp.setCompanyId(companyid);
				csTemp.setProdBasicId(Integer.parseInt(rplist.get(
						"prod_basic_id").toString()));
				csTemp = companyStockService.selectByCompanyStock(csTemp);

				Map<String, Object> lstVal = null;
				List<Object> lstValList = new ArrayList<Object>();
				for (ProductSpecificationInfo psiTemp : psiList) {
					lstVal = new HashMap<String, Object>();
					lstProductJson = new HashMap<String, Object>();
					lstVal.put("key", psiTemp.getId());
					lstVal.put("val", psiTemp.getInventorynumber()
							+ rplist.get("unit").toString());
					lstProductJson.put("key", psiTemp.getId());
					lstProductJson.put("price", psiTemp.getPrice());
					lstProductJson.put("OriginalPrice",
							psiTemp.getMarketPrice());
					if (null != csTemp
							&& (csTemp.getInventorynumber() - psiTemp
									.getInventorynumber()) >= 0) {// 基地商品库存不足
						int count = csTemp.getInventorynumber()
								/ psiTemp.getInventorynumber();
						maxInventory += count;
						lstProductJson.put("inventory", count);
						lstProductJson.put("BuyMaxNum", count);
					} else {
						lstProductJson.put("inventory", 0);
						lstProductJson.put("BuyMaxNum", 0);
					}

					lstProductJson.put("id", psiTemp.getId());
					lstProductJsonList.add(lstProductJson);
					lstValList.add(lstVal);
				}
				lstSKUVal.put("name", "规格");
				lstSKUVal.put("lstVal", lstValList);
			} else {// 礼盒商品
				ProductPackage pp = new ProductPackage();
				pp.setProdId(prodId);
				List<ProductPackage> pplist = productPackageService
						.getAllByProductPackage(pp);
				StringBuffer sb = new StringBuffer();

				List<Integer> tempCount = new ArrayList<Integer>();// 礼盒中每一个商品的最大数量
				boolean canSale = true;
				Map<String, Object> lstVal = null;
				for (ProductPackage p1 : pplist) {
					csTemp = new CompanyStock();
					csTemp.setCompanyId(companyid);
					csTemp.setProdBasicId(p1.getProdBaseicId());
					csTemp = companyStockService.selectByCompanyStock(csTemp);// 获取礼盒中每一个字典的id对应的系统库存表

					sb.append(
							BaseConfig.productBasicMap
									.get(p1.getProdBaseicId()).getName())
							.append(":")
							.append(p1.getInventorynumber())
							.append(BaseConfig.productBasicMap.get(
									p1.getProdBaseicId()).getUnit())
							.append("+");

					if (canSale
							&& null != csTemp
							&& (csTemp.getInventorynumber() - p1
									.getInventorynumber()) >= 0) {// 基地商品库存不足
						int count = csTemp.getInventorynumber()
								/ p1.getInventorynumber();
						// maxInventory += count;
						tempCount.add(count);
					} else {
						tempCount = null;
						canSale = false;
					}
				}
				json.put("packageInfo",
						sb.toString().substring(0, sb.toString().length() - 1));// 礼盒中商品信息

				lstVal = new HashMap<String, Object>();
				lstProductJson = new HashMap<String, Object>();
				List<Object> lstValList = new ArrayList<Object>();
				lstVal.put("key", prodId);
				lstVal.put("val", "礼盒");

				lstProductJson.put("key", prodId);
				lstProductJson.put("price", rplist.get("price"));
				lstProductJson.put("OriginalPrice", rplist.get("market_price"));
				lstProductJson.put("id", prodId);
				lstProductJsonList.add(lstProductJson);
				lstValList.add(lstVal);
				if (canSale) {
					lstProductJson.put("inventory",
							tempCount.size() > 0 ? Collections.min(tempCount)
									: 0);
					lstProductJson.put("BuyMaxNum",
							tempCount.size() > 0 ? Collections.min(tempCount)
									: 0);
					maxInventory = tempCount.size() > 0 ? Collections
							.min(tempCount) : 0;
				} else {
					lstProductJson.put("inventory", 0);
					lstProductJson.put("BuyMaxNum", 0);
				}

				lstSKUVal.put("name", "规格");
				lstSKUVal.put("lstVal", lstValList);
			}
			lstSKUValList.add(lstSKUVal);

			// 促销信息
			List<PromotionActivity> paList = promotionProductService
					.getAllByPromotionProductVsInTime(prodId);// 获取该商品参加的所有促销活动
			int tempPromotionCount = 0;
			PromotionActivity pa = new PromotionActivity();
			pa.setAllProduct(1);
			List<PromotionActivity> PaList2 = promotionActivityService
					.getAllByPromotionActivityNormal(pa);// 判断全场参加的商品
			paList.addAll(PaList2);
			for (PromotionActivity paTemp1 : paList) {
				Map<String, Object> DisInfo = new HashMap<String, Object>();
				DisInfo.put("Title", paTemp1.getName());
				DisInfo.put("TimeStart",
						Tools.date2Str(paTemp1.getStartTime(), "yyyy年MM月dd日"));
				DisInfo.put("TimeEnd",
						Tools.date2Str(paTemp1.getEndTime(), "yyyy年MM月dd日"));

				Map<String, Object> Activity = new HashMap<String, Object>();
				List<Object> ActivityList = new ArrayList<Object>();
				if (paTemp1.getType() == 1) {// 0满减 1满折
					Activity.put("Activity", "满" + paTemp1.getNeedPrice()
							+ "元 打" + paTemp1.getDiscount() + "折");
				} else {
					Activity.put("Activity", "满" + paTemp1.getNeedPrice()
							+ "元 减" + paTemp1.getSubstractPrice() + "元");
				}
				ActivityList.add(Activity);
				DisInfo.put("Description", ActivityList);
				DisInfoList.add(DisInfo);
				tempPromotionCount++;
			}
			Discount.put("DisInfo", DisInfoList);
			Discount.put("total", tempPromotionCount);
			// DisInfoList.add(Discount);

			SKU.put("lstSKUVal", lstSKUValList);
			SKU.put("lstProductJson", lstProductJsonList);
			SKUAll.put("SKU", SKU);
			SKUAll.put("Label", "");
			SKUAll.put("Discount", Discount);

			json.put("maxInventory", maxInventory);

			// if(maxInventory>0){
			// json.put("maxInventory", maxInventory);
			// }else{
			// json.put("maxInventory", -1);
			// }
			//
			json.put("Data", SKUAll);

		} else {
			//商品不存在
			json.put(BaseConfig.RESCODE, "ER5001");
			json.put(BaseConfig.RESMESSAGE,
					BaseConfig.MESSAGE.get("productInfo.ER5001").toString());
		}

		try {
			responseAjax(json, response);
		} catch (UnsupportedEncodingException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}

	/**
	 * 获取商品促销信息
	 * 
	 * @return
	 */
	@RequestMapping("/getProductPromotionInfo")
	public void getProductPromotionInfo(HttpServletResponse response,
			Integer prodId, HttpServletRequest request, HttpSession session) {
		JSONObject json = new JSONObject();
		// 获取商品信息
		Product p = new Product();
		Map<String, Object> rplist = productService.selectFrontByProduct(p);

		json.put(BaseConfig.RESCODE, "0");
		json.put(BaseConfig.RESMESSAGE, "success");
		json.put(BaseConfig.RESLIST, rplist);
		try {
			responseAjax(json, response);
		} catch (UnsupportedEncodingException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}

	/**
	 * 点击收藏商品
	 * 
	 * @return
	 */
	@RequestMapping("/changeProductCollectionState")
	public void changeProductCollectionState(HttpServletResponse response,
			Integer prodId, boolean type, HttpServletRequest request,
			HttpSession session) {
		JSONObject json = new JSONObject();
		User su = (User) session.getAttribute(SystemConfig.SESSION_FRONT_USER);
		if (null != su) {
			// 获取商品信息
			UserCollection u = new UserCollection();
			u.setProdId(prodId);
			u.setUserId(su.getId());
			UserCollection uTemp = userCollectionService
					.selectByUserCollection(u);
			if (null != uTemp) {// 已收藏
				if (!type) {
					userCollectionService.deleteByPrimaryKey(u.getId());
					json.put(BaseConfig.RESCODE, "0");
					json.put(BaseConfig.RESMESSAGE, "取消收藏成功");
				} else {
					json.put(BaseConfig.RESCODE, "0");
					json.put(BaseConfig.RESMESSAGE, "添加收藏成功");
				}
			} else {
				if (type) {
					Product p = productService.selectProductByCart(prodId);
					if (null != p) {
						u.setAddTime(new Date());
						userCollectionService.insertSelective(u);
						json.put(BaseConfig.RESCODE, "0");
						json.put(BaseConfig.RESMESSAGE, "添加收藏成功");
					} else {
						json.put(BaseConfig.RESCODE, "ER5001");
						json.put(BaseConfig.RESMESSAGE,
								BaseConfig.MESSAGE.get("productInfo.ER5001")
										.toString());
					}

				} else {
					userCollectionService.deleteByPrimaryKey(u.getId());
					json.put(BaseConfig.RESCODE, "0");
					json.put(BaseConfig.RESMESSAGE, "取消收藏成功");
				}
			}
		} else {
			json.put(BaseConfig.RESCODE, "1");
			json.put(BaseConfig.RESMESSAGE,
					BaseConfig.MESSAGE.get("user.ER1025").toString());
		}

		try {
			responseAjax(json, response);
		} catch (UnsupportedEncodingException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}

	/**
	 * 判断用户是否收藏商品
	 * 
	 * @return
	 */
	@RequestMapping("/getProductCollectionState")
	public void getProductCollectionState(HttpServletResponse response,
			Integer prodId, HttpServletRequest request, HttpSession session) {
		JSONObject json = new JSONObject();
		User su = (User) session.getAttribute(SystemConfig.SESSION_FRONT_USER);
		UserCollection uTemp = null;
		if (null != su) {
			// 获取商品信息
			UserCollection u = new UserCollection();
			u.setProdId(prodId);
			u.setUserId(su.getId());
			uTemp = userCollectionService.selectByUserCollection(u);
		}
		json.put(BaseConfig.RESCODE, "0");
		json.put(BaseConfig.RESMESSAGE, "");
		json.put(BaseConfig.RESTYPE, null != uTemp ? "1" : "0");
		try {
			responseAjax(json, response);
		} catch (UnsupportedEncodingException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}

	/**
	 * 获取评论信息
	 * 
	 * @return
	 */
	@RequestMapping("/getComment")
	public void getComment(HttpServletResponse response, Integer prodId,
			Integer pageIndex, HttpServletRequest request, HttpSession session,
			Integer type, String from) {
		JSONObject json = new JSONObject();
		// 获取商品信息
		Product p = new Product();
		p.setId(prodId);
		// Map<String, Object> rplist = productService.selectFrontByProduct(p);
		UserComment uc = new UserComment();
		uc.setProdId(prodId);
		uc.setvState(1);
		int countAll = 0;
		if (Tools.isEmpty(from)) {
			countAll = userCommentService.selectCountLevelFromUserComment(uc);
		}

		uc.setCommentLevel(1);
		int countA = userCommentService.selectCountLevelFromUserComment(uc);
		uc.setCommentLevel(2);
		int countB = userCommentService.selectCountLevelFromUserComment(uc);
		uc.setCommentLevel(3);
		int countC = userCommentService.selectCountLevelFromUserComment(uc);

		UserComment ucList = new UserComment();

		AjaxPage ap = new AjaxPage();
		ap.setCurrentPage(pageIndex);
		ap.setFunctionName("getCommentList");
		ap.setShowCount(10);
		ucList.setAjaxPage(ap);
		if (type != 0) {
			ucList.setCommentLevel(type);
		}
		ucList.setProdId(prodId);
		List<Map<String, Object>> Data = userCommentService
				.listAjaxPageByUserCommentFrontShow(ucList);

		json.put(BaseConfig.RESCODE, "0");
		json.put(BaseConfig.RESMESSAGE, "success");
		json.put("Data", Data);
		json.put("pageStr", ucList.getAjaxPage().getPageStr());
		json.put("countAll", countAll);
		json.put("countA", countA);
		json.put("countB", countB);
		json.put("countC", countC);
		try {
			responseAjax(json, response);
		} catch (UnsupportedEncodingException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}
}
